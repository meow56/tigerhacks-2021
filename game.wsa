;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;     It's all so empty...      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Heap layout:                  ;;
;; 1-256 are used for variables. ;;
;; 1 is quarks.                  ;;
;; 2 is heat.                    ;;
;; 3 is neutrons.                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 257-512 are for internals.    ;;
;; 257 is used for stdin.        ;;
;; 258 is the seed of the RNG.   ;;
;; 259 is a temp variable.       ;;
;; 260 is number of quarks/heat  ;;
;;     on quark creation.        ;;
;; 261 is chance to avoid quark  ;;
;;     annihilation * 10.        ;;
;; 262 is universal expansion    ;;
;;     * 100.                    ;;
;; 263 is quarks/second.         ;;
;; 264 is total q-generator Is.  ;;
;; 265 is q-gen I multiplier     ;;
;;     * 100.                    ;;
;; 266 is total q-generator IIs. ;;
;; 267 is q-gen II multiplier    ;;
;;     * 100.                    ;;
;; 268 is total q-generator III. ;;
;; 269 is q-gen III multiplier   ;;
;;     * 100.                    ;;
;; 270 is q-gen IV multiplier    ;;
;;     * 100.                    ;;
;; 271 is q-gen I cost           ;;
;; 272 is q-gen II cost          ;;
;; 273 is q-gen III cost         ;;
;; 274 is q-gen IV cost          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 513-768 are for flags.        ;;
;; 513 is the upgrade flag.      ;;
;;   (unlock at 10 heat)         ;;
;; 514 is the beginner flag.     ;;
;;   (hides heat for first       ;;
;;    five quarks)               ;;
;; 515 is hide bought flag.      ;;
;;   (hides bought upgrades)     ;;
;; 516 is the move on flag.      ;;
;;   (says we're ready to go!)   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 769-1024 are for upgrades     ;;
;;    and generators.            ;;
;; 769 is double gain.           ;;
;;   (Double quark/heat gain.)   ;;
;; 770 is chance increase.       ;;
;;   (Increase non-annihilation  ;;
;;    chance to 5%.)             ;;
;; 771 is expansion increase.    ;;
;;   (Increase universal         ;;
;;    expansion to 0.9.)         ;;
;; 772 is chance increase II.    ;;
;;   (Increase non-annihilation  ;;
;;    chance to 20%.)            ;;
;; 773 is expansion increase II. ;;
;;   (Increase universal         ;;
;;    expansion to 0.5.)         ;;
;; 774 is chance increase III.   ;;
;;   (Increase non-annihilation  ;;
;;    chance to 50%.)            ;;
;; 775 is bought quark           ;;
;;    generator I.               ;;
;; 776 is bought quark           ;;
;;    generator II.              ;;
;; 777 is bought quark           ;;
;;    generator III.             ;;
;; 778 is bought quark           ;;
;;    generator IV.              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Setup
	push 1 ;; quarks
	push 0
	store

	push 2 ;; heat
	push 0
	store

	;; RNG is seeded by player input.
	;; See the end of the intro.

	push 260 ;; amount on creation
	push 1
	store
	
	push 261 ;; avoid annihilation chance
	push 0
	store

	push 262 ;; universal expansion
	push 99
	store

	push 265 ;; gen I mult
	push 100
	store

	push 267 ;; gen II mult
	push 100
	store

	push 269 ;; gen III mult
	push 100
	store

	push 270 ;; gen IV mult
	push 100
	store
	
	push 271 ;; gen I cost
	push 1
	store
	
	push 272 ;; gen II cost
	push 100
	store
	
	push 273 ;; gen III cost
	push 100000
	store
	
	push 274 ;; gen IV cost
	push 1000000000
	store

	push 513 ;; upgrade flag
	push 1
	store

	push 514 ;; beginner flag
	push -5
	store

	push 516 ;; move on flag
	push 1
	store

	push 769 ;; gain upgrade
	push 1
	store
	
	push 770 ;; chance upgrade
	push 1
	store

	push 771 ;; expansion upgrade
	push 1
	store
	
	push 772 ;; chance upgrade II
	push 1
	store

	push 773 ;; expansion upgrade II
	push 1
	store
	
	push 774 ;; chance upgrade III
	push 1
	store

;; Intro
	push "You are nothing.\n"
	call print

	push "But you could be something.\n"
	call print

	push "Exist. (Type something!)\n"
	call print
	push 0 ;; accumulator

loop:
	readc 257
	retrieve 257
	dup
	push '\n'
	sub ;; check if \n
	jz .done
	;; not done.
	add ;; accum + current value
	jmp loop

.done:
	drop ;; drop \n
	push 134456
	mod ;; make sure it's in our bounds
	push 258
	swap
	store ;; RNG seeded.
	
	push "And so, you are.\n\n\n"
	call print

quarks:
	retrieve 2
	jz .noheat
	retrieve 514
	jn .noheat
	push "You have "
	call print
	retrieve 1
	printi
	push " quarks and "
	call print
	retrieve 2
	push 10
	div
	printi
	push " heat.\n"
	call print
	push "Universal expansion is causing your heat\n"
	call print
	push "to be multiplied by 0." 
	call print
	retrieve 262
	printi
	push " when you create a quark.\n"
	call print
	jmp .merge

.noheat:
	push "You have "
	call print
	retrieve 1
	printi
	push " quarks.\n"
	call print
	
.merge:
	retrieve 513
	jz .upgr
	push "Create a (q)uark.\n"
	call print
	jmp .input

.upgr:
	push "Create a (q)uark, or check the (u)pgrades.\n"
	call print
	retrieve 770
	jz .notemoveon
	jmp .input

.notemoveon:
	push 29
	retrieve 1
	sub ;; 29 - quarks
	jn .enoughquarks
	
	push "***Move on: Have 30 quarks and no heat.***\n"
	call print
	jmp .input

.enoughquarks:
	push 10
	retrieve 2
	sub ;; 10 - energy
	jn .notenoughcool
	
	push 516
	push 0
	store
	push "(M)ove on.\n"
	call print
	jmp .input

.notenoughcool:
	push "***Move on: Have 30 quarks and no heat.***\n"
	call print
	jmp .input

.input:
	call safereadc
	
	dup
	push 'q'
	sub
	jz createquark
	
	dup
	push 'Q'
	sub
	jz createquark

	retrieve 513
	jz .hasupgrades
	jmp .noupgrades
.hasupgrades:	
	dup
	push 'u'
	sub
	jz .toupgrades
	
	dup
	push 'U'
	sub
	jz .toupgrades

.noupgrades:
	retrieve 516
	jz .canmoveon
	jmp quarks
.canmoveon:
	dup
	push 'm'
	sub
	jz .moveon

	dup
	push 'M'
	sub
	jz .moveon

	jmp quarks

.moveon:
	push "It seems the universe is cool.\n"
	call print
	push "Perhaps you can make something greater with\n"
	call print
	push "what you have collected.\n"
	call print
	jmp baryons
	end

.toupgrades:
	drop
	jmp upgrades

upgrades:
	push "You have "
	call print
	retrieve 1
	printi
	push " quarks and "
	call print
	retrieve 2
	push 10
	div
	printi
	push " heat.\n"
	call print
	
	push "Current upgrades:\n"
	call print
	push 259
	push 1 ;; upgrades
	store
	retrieve 769
	jz .b769
	push -769
	call .nextup
	push "Double Up: You get double the quarks/heat on quark creation.\n"
	call print
	push "       15 heat.\n"
	call print

.b769:
	retrieve 770
	jz .b770
	push -770
	call .nextup
	push "Baryon Asymmetry: Your quarks have a chance to avoid annihilation. (10%)\n"
	call print
	push "       25 heat.\n"
	call print
	jmp .findisplay

.b770:
	retrieve 771
	jz .b771
	push -771
	call .nextup
	push "Cool Down: Universal Expansion is 0.9.\n"
	call print
	push "       1 quark.\n"
	call print
	
.b771:
	retrieve 772
	jz .b772
	;; I'd put a req for 770 here,
	;; but you can only see this upgrade
	;; if you bought 770!
	push -772
	call .nextup
	push "Tip the Scales: Baryon Asymmetry is 20%.\n"
	call print
	push "       3 quarks, 15 heat.\n"
	call print

.b772:
	retrieve 774
	jz .b774
	retrieve 772
	jz .774r
	jmp .b774
.774r:
	push -774
	call .nextup
	push "Anti-antimatter: Baryon Asymmetry is 100%.\n"
	call print
	push "       7 quarks.\n"
	call print

.b774:
	;; my beautiful ordering is ruined!
	;; but that's what happens when you don't plan.
	retrieve 773
	jz .findisplay
	retrieve 771
	jz .773r
	jmp .findisplay
.773r:
	push -773
	call .nextup
	push "Inflationary Epoch: Universal Expansion is 0.5.\n"
	call print
	push "       20 quarks.\n"
	call print


.findisplay:
	push "(0) Go back.\n"
	call print	

	readi 257
	retrieve 257

	dup
	jz .return

	retrieve 259
.loop:
	push 1
	sub ;; d259 - 1
	dup
	jz .done
	copy 1 ;; copy input
	copy 1 ;; copy d259 - 1
	sub ;; input - (d259 - 1)
	jz .yes
	jmp .loop


.yes:
	drop ;; don't need two copies
	push -769
.loop2:
	dup
	retrieve
	copy 2 ;; copy user input
	sub ;; in - 0d(-7XX)
	jz .same
	push -1
	add ;; -7XX - 1
	jmp .loop2

.same:
	dup
	push -769
	sub
	jz .buy769
	
	dup
	push -770
	sub
	jz .buy770

	dup
	push -771
	sub
	jz .buy771

	dup
	push -772
	sub
	jz .buy772

	dup
	push -773
	sub
	jz .buy773

	dup
	push -774
	sub
	jz .buy774

	push "Error: Invalid upgrade number.\n"
	call print
	end

.buy769:
	call .clearup
	drop
	drop
	retrieve 2
	push 150
	sub ;; heat - 150
	dup
	jn .notenough
	push 2
	swap
	store
	push 769
	push 0
	store
	push 260
	retrieve 260
	push 2
	mul
	store
	
	push "Upgrade bought.\n"
	call print
	jmp upgrades
	
.buy770:
	call .clearup
	drop
	drop
	retrieve 2
	push 250
	sub ;; heat - 250
	dup
	jn .notenough
	push 2
	swap
	store
	push 770
	push 0
	store
	push 261
	push 100
	store
	
	push "Upgrade bought.\n"
	call print
	jmp upgrades

.buy771:
	call .clearup
	drop
	drop
	retrieve 1
	push 1
	sub ;; quarks - 1
	dup
	jn .notenough
	push 1
	swap
	store
	push 771
	push 0
	store
	push 262
	push 90
	store
	
	push "Upgrade bought.\n"
	call print
	jmp upgrades

.buy772:
	call .clearup
	drop
	drop
	retrieve 2
	push 150
	sub ;; heat - 150
	dup
	jn .notenough
	retrieve 1
	push 3
	sub ;; quarks - 3
	dup
	jn .notenough
	push 1
	swap
	store
	push 2
	swap
	store
	push 772
	push 0
	store
	push 261
	push 200
	store
	
	push "Upgrade bought.\n"
	call print
	jmp upgrades
	

.buy773:
	call .clearup
	drop
	drop
	retrieve 1
	push 20
	sub ;; quarks - 20
	dup
	jn .notenough
	push 1
	swap
	store
	push 773
	push 0
	store
	push 262
	push 50
	store
	
	push "Upgrade bought.\n"
	call print
	jmp upgrades

.buy774:
	call .clearup
	drop
	drop
	retrieve 1
	push 7
	sub ;; quarks - 7
	dup
	jn .notenough
	push 1
	swap
	store
	push 774
	push 0
	store
	push 261
	push 1000
	store
	
	push "Upgrade bought.\n"
	call print
	jmp upgrades

.notenough:
	drop
	push "Can't afford upgrade.\n"
	call print
	jmp upgrades

.done:
	;; not valid.
	drop
	jmp upgrades

.return:
	drop
	jmp quarks
	
.clearup:
	push -769
.clearup.loop:
	dup
	push 0
	store
	push 1
	sub
	dup
	push -775
	sub
	jz .clearup.done
	jmp .clearup.loop
.clearup.done:
	drop
	ret

.nextup:
	;; prints "(1) " on first call,
	;;        "(2) " on second call,
	;;        "(3) " on third call,
	;; etc.
	;; also sets -(upgrade num) to be
	;; the printed number.
	;; push the number on the stack
	;; before calling.
	retrieve 259
	store
	push '('
	printc
	push 259
	retrieve 259
	dup
	printi
	push 1
	add
	store
	push ')'
	printc
	push ' '
	printc
	ret

createquark:
	retrieve 2
	retrieve 262
	mul
	push 100
	div
	push 2
	swap
	store
	drop
	retrieve 514
	jn .begfail ;; beginner
	call random
	retrieve 258
	push 1000
	mod
	retrieve 261 ;; non-annihilation chance
	swap
	sub ;; 50 - RNG
	push 1
	sub ;; -1 to avoid RNG = 0 shenanigans
	jn .fail

	push "You obtained "
	call print
	retrieve 260
	dup
	printi
	push " quark(s).\n"
	call print
	retrieve 1
	add
	push 1
	swap
	store
	jmp quarks

.begfail:
	push 514
	retrieve 514
	push 1
	add
	store ;; add 1 to beginner flag
	push "You created a quark, but\n"
	call print
	push "an anti-quark was also created,\n"
	call print
	push "which annihilated your quark.\n"
	call print
	push "The universe feels warmer...\n"
	call print
	retrieve 2
	push 10
	add
	push 2
	swap
	store
	jmp quarks
.fail:
	retrieve 513
	jz .exp
	push "You created a quark, but\n"
	call print
	push "an anti-quark was also created,\n"
	call print
	push "which annihilated your quark.\n"
	call print

.exp:
	push "You obtained "
	call print
	retrieve 260
	dup
	printi
	push 10
	mul
	push " heat.\n"
	call print
	retrieve 2
	dup
	push 90
	sub ;; heat - 90
	jn .noupgr
	push 513
	push 0
	store ;; set upgrade flag
.noupgr:
	add
	push 2
	swap
	store
	jmp quarks


baryons:
	retrieve 3
	jz .noneutrons
	push "You have "
	call print
	retrieve 1
	printi
	push " quarks and "
	call print
	retrieve 3
	printi
	push " neutrons.\n"
	call print
	push "Obtain 4 neutrons to win the game.\n"
	call print
	
.noneutrons:
	push "You have "
	call print
	retrieve 1
	printi
	push " quarks.\n"
	call print
	
.merge:
	retrieve 1
	push 100000000000
	sub
	jn .skipneutrons

	push "Fuse all of your quarks and quark generators (except a single gen 1) into 1 neutron.\n"
	call print
.skipneutrons:
	push "Check the (g)enerators tab.\n"
	call print
	push "Or (w)ait for your generators.\n"
	call print
	
.input:
	call safereadc

	retrieve 775
	jz .inskipneutrons
	
	dup
	push 'n'
	sub
	jz createneutron

	dup
	push 'N'
	sub
	jz createneutron
.inskipneutrons:
	dup
	push 'g'
	sub
	jz generators

	dup
	push 'G'
	sub
	jz generators

	dup
	push 'w'
	sub
	jz .wait
	
	dup
	push 'W'
	sub
	jz .wait

	jmp .input

.wait:
	call tick
	jmp baryons

createneutron:
	retrieve 3
	push 1
	add
	dup
	push 4
	sub
	jz beatgame
	push 3
	swap
	store
	push 1
	push 0
	store
	push 264
	push 0
	store
	push 266
	push 0
	store
	push 268
	push 0
	store
	push 265
	push 100
	store
	push 267
	push 100
	store
	push 269
	push 100
	store
	push 271
	push 100
	store
	push 272
	push 100
	store
	push 273
	push 100000
	store
	push 274
	push 1000000000
	store
	push 775
	push 1
	store
	push 776
	push 0
	store
	push 777
	push 0
	store
	push 778
	push 0
	store
	jmp baryons

beatgame:
	push "As you watch your four neutrons, suddenly\n"
	call print
	push "two of them undergo beta decay, forming a proton and electron each.\n"
	call print
	push "Delightfully, the two remaining neutrons combine with the decay results\n"
	call print
	push "to form a Helium atom. From here, a new universe will take shape...\n"
	call print
	push "And it's all thanks to your hard work. Good job!\n"
	call print
	push "Thanks for playing!!!\n"
	call print
	push "I will likely continue working on this project after the deadline passes...\n"
	call print
	push "But right now I'm sleep-deprived and making way too many little errors to function.\n"
	call print
	push "So this is where it ends!\n"
	call print
	push "Once again, thanks for playing!\n"
	call print
	end

tick:
	retrieve 778
	retrieve 270
	mul
	push 100
	div
	retrieve 268
	add
	push 268
	swap
	store
	retrieve 268
	retrieve 269
	mul
	push 100
	div
	retrieve 266
	add
	push 266
	swap
	store
	retrieve 266
	retrieve 267
	mul
	push 100
	div
	retrieve 264
	add
	push 264
	swap
	store
	retrieve 264
	retrieve 265
	mul
	push 100
	div
	push 263
	swap
	store
	retrieve 1
	retrieve 263
	add
	push 1
	swap
	store
	ret

generators:
	push "Your quark generators are currently producing\n"
	call print
	retrieve 263
	printi
	push " quarks per tick.\n"
	call print

	push "(1) Quark Generator I: "
	call print
	retrieve 264
	printi
	push " ["
	call print
	retrieve 775
	printi
	push "]\n"
	call print

	push "    Cost: "
	call print
	retrieve 271
	printi
	push " quarks\n"
	call print
	
	retrieve 775
	push 1
	sub
	jn .finish
	
	push "(2) Quark Generator II: "
	call print
	retrieve 266
	printi
	push " ["
	call print
	retrieve 776
	printi
	push "]\n"
	call print
	push "    Cost: "
	call print
	retrieve 272
	printi
	push " quarks\n"
	call print

	retrieve 776
	push 1
	sub
	jn .finish
	
	push "(3) Quark Generator III: "
	call print
	retrieve 268
	printi
	push " ["
	call print
	retrieve 777
	printi
	push "]\n"
	call print
	push "    Cost: "
	call print
	retrieve 273
	printi
	push " quarks\n"
	call print
	
	retrieve 777
	push 1
	sub
	jn .finish

	push "(4) Quark Generator IV: "
	call print
	retrieve 778
	printi
	push " ["
	call print
	retrieve 778
	printi
	push "]\n"
	call print
	push "    Cost: "
	call print
	retrieve 274
	printi
	push " quarks\n"
	call print

.finish:
	push "(0) Back.\n"
	call print
.input:
	readi 257
	retrieve 257
	
	dup
	jz .return
	
	dup
	push 1
	sub
	jz .buyq1
	
	retrieve 775
	push 1
	sub
	jn .input
	
	dup
	push 2
	sub
	jz .buyq2
	
	retrieve 776
	push 1
	sub
	jn .input
	
	dup
	push 3
	sub
	jz .buyq3
	
	retrieve 777
	push 1
	sub
	jn .input
	
	dup
	push 4
	sub
	jz .buyq4
	
	jmp .input
	
.return:
	jmp baryons
	
.buyq1:
	retrieve 1
	retrieve 271
	sub ;; num - cost
	dup
	jn .cantafford
	call tick
	push 1
	swap
	store
	retrieve 265
	push 2
	mul
	push 265
	swap
	store
	retrieve 264
	push 1
	add
	push 264
	swap
	store
	retrieve 271
	push 100
	mul
	push 271
	swap
	store
	retrieve 775
	push 1
	add
	push 775
	swap
	store
	jmp generators
	
.buyq2:
	retrieve 1
	retrieve 272
	sub ;; num - cost
	dup
	jn .cantafford
	call tick
	push 1
	swap
	store
	retrieve 267
	push 2
	mul
	push 267
	swap
	store
	retrieve 266
	push 1
	add
	push 266
	swap
	store
	retrieve 272
	push 100
	mul
	push 272
	swap
	store
	retrieve 776
	push 1
	add
	push 776
	swap
	store
	jmp generators
	
.buyq3:
	retrieve 1
	retrieve 273
	sub ;; num - cost
	dup
	jn .cantafford
	call tick
	push 1
	swap
	store
	retrieve 269
	push 2
	mul
	push 269
	swap
	store
	retrieve 268
	push 1
	add
	push 268
	swap
	store
	retrieve 273
	push 100
	mul
	push 273
	swap
	store
	retrieve 777
	push 1
	add
	push 777
	swap
	store
	jmp generators
	
	
.buyq4:
	retrieve 1
	retrieve 274
	sub ;; num - cost
	dup
	jn .cantafford
	call tick
	push 1
	swap
	store
	retrieve 270
	push 2
	mul
	push 270
	swap
	store
	retrieve 274
	push 100
	mul
	push 274
	swap
	store
	retrieve 778
	push 1
	add
	push 778
	swap
	store
	jmp generators
	
.cantafford:
	push "Can't afford generator.\n"
	call print
	jmp generators

print:
	dup
	jz .done
	printc
	jmp print
.done:
	drop
	ret

lessthan:
	;; Pushes 1 to the stack if the top
	;; stack element is less than the second
	;; stack element, or 0 otherwise.
	;; Retains the elements.
	dup ;; copies the first
	copy 3 ;; copies the second
	sub
	jn .neg
	drop
	push 0
	ret
.neg:
	;; first less than second
	drop
	push 1
	ret

random:
	;; Updates a "random number" (heap 258)
	;; using a linear congruential generator
	;; with a = 8121, c = 28411, m = 134456.
	;; these numbers were chosen
	;; since they're small. I took them
	;; from the Wikipedia page on LCGs.
	;; I guess they were used by MATLAB?
	;; LCGs are obviously not very random,
	;; but it's easy to implement.
	push 258
	retrieve 258
	push 8121
	mul
	push 28411
	add
	push 134456
	mod
	store
	ret

safereadc:
	;; Like a regular readc, but
	;; consumes everything up to \n.
	;; Returns the first character.
	retrieve 259 ;; pop 259...
	push 259
	push 10
	store

.loop:
	readc 257
	retrieve 257
	dup
	push '\n'
	sub
	jz .islf
	retrieve 259
	push 10
	sub
	jz .first
	drop
	jmp .loop

.islf:
	drop
	retrieve 259
	dup
	push 10
	sub
	jz .loop
	push 259
	copy 2
	store ;; ...push 259.
	slide 1 ;; slide off the pop
	ret

.first:
	push 259
	swap
	store
	jmp .loop
